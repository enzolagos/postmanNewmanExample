{
	"info": {
		"_postman_id": "a5e3e1b0-0987-4959-89a9-bc57eaddaf30",
		"name": "PresentationCRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24905461"
	},
	"item": [
		{
			"name": "Create user (Register)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//headers\r",
							"pm.test(\"Content-Type is present and has json value\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"//body\r",
							"pm.test(\"Body Response: FullName is Enzo Lakes\", () => {\r",
							"  pm.expect(responseJson.FullName).to.eql(\"Enzo Lakes\");\r",
							"});\r",
							"//cookies\r",
							"pm.test(\"Cookie ASP.NET_SessionId is present\", () => {\r",
							"  pm.expect(pm.cookies.has('ASP.NET_SessionId')).to.be.true;\r",
							"});\r",
							"\r",
							"//guardo mail y contra para luego loguearme\r",
							"pm.environment.set(\"userMail\",responseJson.Email)\r",
							"pm.environment.set(\"userPassword\",\"123456\")\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\":\"{{$randomLastName}}{{$randomInt}}@testing.com\",\r\n    \"Password\":\"123456\",\r\n    \"FullName\":\"Enzo Lakes\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/api/user.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"user.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user (Login)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"//si el login fue satisfactorio, testea que se haya seteado bien la var userMail\r",
							"if(!pm.response.text().includes(\"Error\")){\r",
							"    pm.test(\"Body Response: Email is correctly setted\", () => {\r",
							"        pm.expect(responseJson.Email).to.eql(pm.environment.get(\"userMail\"));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Content-Type is present and has json value\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/api/user.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"user.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user (Login) FAIL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"//si el login fue satisfactorio, testea que se haya seteado bien la var userMail\r",
							"if(!pm.response.text().includes(\"Error\")){\r",
							"    pm.test(\"Body Response: Email is correctly setted\", () => {\r",
							"        pm.expect(responseJson.Email).to.eql(pm.environment.get(\"userMail\"));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Content-Type is present and has json value\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "11351561561",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/api/user.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"user.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"pm.test(\"Body request matches body response\", ()=>{\r",
							"    pm.expect(requestJson.Content).to.eql(pm.environment.get(\"userMail\"));\r",
							"}) */\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"projectId\",responseJson.Id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\":\"Test{{$randomInt}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/api/projects.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"projects.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get project by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body Response: projectId is correctly setted\", () => {\r",
							"        pm.expect(responseJson.Id).to.eql(pm.environment.get(\"projectId\"));\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/api/projects/{{projectId}}.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create item in a project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Item was created in the correct project\", () => {\r",
							"        pm.expect(responseJson.ProjectId).to.eql(pm.environment.get(\"projectId\"));\r",
							"    });\r",
							"\r",
							"pm.environment.set(\"itemId\",responseJson.Id);\r",
							"pm.environment.set(\"itemContent\",responseJson.Content)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\":\"item{{$randomInt}}\",\r\n    \"ProjectId\":\"{{projectId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/api/items.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"items.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar item by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Item has been updated\", () => {\r",
							"    pm.expect(responseJson.Content).not.to.eql(pm.environment.get(\"itemContent\"));\r",
							"    pm.expect(responseJson.Content).to.eql(\"cambio el contenido\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Priority\":3,\r\n    \"Content\": \"cambio el contenido\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/api/items/{{itemId}}.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"items",
						"{{itemId}}.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login is successfull\", function () {\r",
							"    pm.expect(pm.response.text()).not.to.include(\"Error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Item by ID has been deleted\",()=>{\r",
							"    pm.expect(responseJson.Deleted).to.eql(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{userPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{userMail}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HOST}}/api/items/{{itemId}}.json",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"items",
						"{{itemId}}.json"
					]
				}
			},
			"response": []
		}
	]
}
